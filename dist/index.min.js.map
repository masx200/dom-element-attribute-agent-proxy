{"version":3,"file":"index.min.js","sources":["index.js"],"sourcesContent":["const valuestring = \"value\";\r\nfunction isobject(a) {\r\n    return typeof a === \"object\" && a !== null;\r\n}\r\nfunction isstring(a) {\r\n    return typeof a === \"string\";\r\n}\r\nfunction objtostylestring(o) {\r\n    return Object.entries(o)\r\n        .map(([key, value]) => key + \":\" + value)\r\n        .join(\";\");\r\n}\r\nfunction asserthtmlelement(ele) {\r\n    if (!(ele instanceof HTMLElement ||\r\n        ele instanceof SVGElement ||\r\n        ele instanceof Element)) {\r\n        throw TypeError(\"invalid HTMLElement!\");\r\n    }\r\n    else\r\n        return true;\r\n}\r\nfunction createeleattragentreadwrite(ele) {\r\n    asserthtmlelement(ele);\r\n    const isinputtextortextarea = (ele.tagName === \"INPUT\" && Reflect.get(ele, \"type\") === \"text\") ||\r\n        ele.tagName === \"TEXTAREA\";\r\n    var temp = Object.create(null);\r\n    return new Proxy(temp, {\r\n        ownKeys() {\r\n            const keys = Reflect.ownKeys(ele.attributes).filter(k => !/\\d/.test(String(k)[0]));\r\n            return isinputtextortextarea\r\n                ? Array.from(new Set([...keys, valuestring]))\r\n                : keys;\r\n        },\r\n        get(target, key) {\r\n            if (isinputtextortextarea && key === valuestring) {\r\n                return Reflect.get(ele, valuestring);\r\n            }\r\n            else {\r\n                var v = ele.getAttribute(String(key));\r\n                if (!v) {\r\n                    return;\r\n                }\r\n                if (isstring(v)) {\r\n                    try {\r\n                        return JSON.parse(String(v));\r\n                    }\r\n                    catch (error) {\r\n                        return v;\r\n                    }\r\n                }\r\n                else\r\n                    return;\r\n            }\r\n        },\r\n        set(t, key, v) {\r\n            if (isinputtextortextarea && key === valuestring) {\r\n                return Reflect.set(ele, valuestring, v);\r\n            }\r\n            else if (key === \"style\") {\r\n                ele.setAttribute(String(key), objtostylestring(v));\r\n                return true;\r\n            }\r\n            else {\r\n                ele.setAttribute(String(key), isobject(v) ? JSON.stringify(v) : String(v));\r\n                return true;\r\n            }\r\n        },\r\n        deleteProperty(t, k) {\r\n            ele.removeAttribute(String(k));\r\n            return true;\r\n        },\r\n        has(target, key) {\r\n            if (isinputtextortextarea && key === valuestring) {\r\n                return true;\r\n            }\r\n            else {\r\n                return ele.hasAttribute(String(key));\r\n            }\r\n        },\r\n        defineProperty() {\r\n            return false;\r\n        },\r\n        getOwnPropertyDescriptor(target, key) {\r\n            const otherdescipter = {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true\r\n            };\r\n            if (isinputtextortextarea && key === valuestring) {\r\n                return {\r\n                    value: Reflect.get(ele, valuestring),\r\n                    ...otherdescipter\r\n                };\r\n            }\r\n            else {\r\n                var attr = ele.getAttribute(String(key));\r\n                if (attr) {\r\n                    return {\r\n                        value: attr,\r\n                        ...otherdescipter\r\n                    };\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\n\nexport default createeleattragentreadwrite;\n//# sourceMappingURL=index.js.map\n"],"names":["valuestring","ele","HTMLElement","SVGElement","Element","TypeError","asserthtmlelement","isinputtextortextarea","tagName","Reflect","get","temp","Object","create","Proxy","[object Object]","keys","ownKeys","attributes","filter","k","test","String","Array","from","Set","target","key","v","getAttribute","JSON","parse","error","t","set","setAttribute","o","entries","map","value","join","a","stringify","deleteProperty","removeAttribute","has","hasAttribute","defineProperty","otherdescipter","enumerable","configurable","writable","attr"],"mappings":"AAAA,MAAMA,EAAc,uBAqBpB,SAAqCC,IATrC,SAA2BA,GACvB,GAAMA,aAAeC,aACjBD,aAAeE,YACfF,aAAeG,QAIf,OAAO,EAHP,MAAMC,UAAU,wBAMpBC,CAAkBL,GAClB,MAAMM,EAAyC,UAAhBN,EAAIO,SAAoD,SAA7BC,QAAQC,IAAIT,EAAK,SACvD,aAAhBA,EAAIO,QACR,IAAIG,EAAOC,OAAOC,OAAO,MACzB,OAAO,IAAIC,MAAMH,EAAM,CACnBI,UACI,MAAMC,EAAOP,QAAQQ,QAAQhB,EAAIiB,YAAYC,OAAOC,IAAM,KAAKC,KAAKC,OAAOF,GAAG,KAC9E,OAAOb,EACDgB,MAAMC,KAAK,IAAIC,IAAI,IAAIT,EAAMhB,KAC7BgB,GAEVD,IAAIW,EAAQC,GACR,GAAIpB,GAAyBoB,IAAQ3B,EACjC,OAAOS,QAAQC,IAAIT,EAAKD,GAGxB,IAAI4B,EAAI3B,EAAI4B,aAAaP,OAAOK,IAChC,GAAKC,GAlCG,iBAqCKA,EACT,IACI,OAAOE,KAAKC,MAAMT,OAAOM,IAE7B,MAAOI,GACH,OAAOJ,IAOvBb,IAAIkB,EAAGN,EAAKC,GACR,OAAIrB,GAAyBoB,IAAQ3B,EAC1BS,QAAQyB,IAAIjC,EAAKD,EAAa4B,GAExB,UAARD,GACL1B,EAAIkC,aAAab,OAAOK,IApDdS,EAoDqCR,EAnDpDhB,OAAOyB,QAAQD,GACjBE,IAAI,EAAEX,EAAKY,KAAWZ,EAAM,IAAMY,GAClCC,KAAK,QAkDS,IAGPvC,EAAIkC,aAAab,OAAOK,GA7DhB,iBADNc,EA8DqCb,IA7Db,OAANa,EA6DwBX,KAAKY,UAAUd,GAAKN,OAAOM,KAChE,GA/DvB,IAAkBa,EAMQL,GA4DlBO,eAAc,CAACV,EAAGb,KACdnB,EAAI2C,gBAAgBtB,OAAOF,KACpB,GAEXyB,IAAG,CAACnB,EAAQC,OACJpB,GAAyBoB,IAAQ3B,IAI1BC,EAAI6C,aAAaxB,OAAOK,IAGvCoB,eAAc,KACH,EAEXhC,yBAAyBW,EAAQC,GAC7B,MAAMqB,EAAiB,CACnBC,YAAY,EACZC,cAAc,EACdC,UAAU,GAEd,GAAI5C,GAAyBoB,IAAQ3B,EACjC,MAAO,CACHuC,MAAO9B,QAAQC,IAAIT,EAAKD,MACrBgD,GAIP,IAAII,EAAOnD,EAAI4B,aAAaP,OAAOK,IACnC,OAAIyB,EACO,CACHb,MAAOa,KACJJ,QAIP"}
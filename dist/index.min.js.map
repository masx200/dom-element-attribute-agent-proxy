{"version":3,"file":"index.min.js","sources":["index.js"],"sourcesContent":["const Reflect = window.Reflect;\r\nconst { get, ownKeys, set } = Reflect;\r\nconst valuestring = \"value\";\r\nfunction isobject(a) {\r\n    return typeof a === \"object\" && a !== null;\r\n}\r\nfunction isstring(a) {\r\n    return typeof a === \"string\";\r\n}\r\nfunction objtostylestring(o) {\r\n    return Object.entries(o)\r\n        .map(([key, value]) => key + \":\" + value)\r\n        .join(\";\");\r\n}\r\nfunction asserthtmlelement(ele) {\r\n    if (!(ele instanceof HTMLElement ||\r\n        ele instanceof SVGElement ||\r\n        ele instanceof Element)) {\r\n        throw TypeError(\"invalid HTMLElement!\");\r\n    }\r\n    else\r\n        return true;\r\n}\r\nfunction createeleattragentreadwrite(ele) {\r\n    asserthtmlelement(ele);\r\n    const isinputtextortextarea = (ele.tagName === \"INPUT\" && get(ele, \"type\") === \"text\") ||\r\n        ele.tagName === \"TEXTAREA\";\r\n    var temp = Object.create(null);\r\n    return new Proxy(temp, {\r\n        ownKeys() {\r\n            const keys = ownKeys(ele.attributes).filter(k => !/\\d/.test(String(k)[0]));\r\n            return isinputtextortextarea\r\n                ? Array.from(new Set([...keys, valuestring]))\r\n                : keys;\r\n        },\r\n        get(target, key) {\r\n            if (isinputtextortextarea && key === valuestring) {\r\n                return get(ele, valuestring);\r\n            }\r\n            else {\r\n                var v = ele.getAttribute(String(key));\r\n                if (!v) {\r\n                    return;\r\n                }\r\n                if (isstring(v)) {\r\n                    try {\r\n                        return JSON.parse(String(v));\r\n                    }\r\n                    catch (error) {\r\n                        return v;\r\n                    }\r\n                }\r\n                else\r\n                    return;\r\n            }\r\n        },\r\n        set(t, key, v) {\r\n            if (isinputtextortextarea && key === valuestring) {\r\n                return set(ele, valuestring, v);\r\n            }\r\n            else if (key === \"style\") {\r\n                ele.setAttribute(String(key), isstring(v) ? v : isobject(v) ? objtostylestring(v) : String(v));\r\n                return true;\r\n            }\r\n            else {\r\n                ele.setAttribute(String(key), isobject(v) ? JSON.stringify(v) : String(v));\r\n                return true;\r\n            }\r\n        },\r\n        deleteProperty(t, k) {\r\n            ele.removeAttribute(String(k));\r\n            return true;\r\n        },\r\n        has(target, key) {\r\n            if (isinputtextortextarea && key === valuestring) {\r\n                return true;\r\n            }\r\n            else {\r\n                return ele.hasAttribute(String(key));\r\n            }\r\n        },\r\n        defineProperty() {\r\n            return false;\r\n        },\r\n        getOwnPropertyDescriptor(target, key) {\r\n            const otherdescipter = {\r\n                enumerable: true,\r\n                configurable: true,\r\n                writable: true\r\n            };\r\n            if (isinputtextortextarea && key === valuestring) {\r\n                return {\r\n                    value: get(ele, valuestring),\r\n                    ...otherdescipter\r\n                };\r\n            }\r\n            else {\r\n                var attr = ele.getAttribute(String(key));\r\n                if (attr) {\r\n                    return {\r\n                        value: attr,\r\n                        ...otherdescipter\r\n                    };\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\n\nexport default createeleattragentreadwrite;\n//# sourceMappingURL=index.js.map\n"],"names":["Reflect","window","get","ownKeys","set","valuestring","isobject","a","isstring","ele","HTMLElement","SVGElement","Element","TypeError","asserthtmlelement","isinputtextortextarea","tagName","temp","Object","create","Proxy","[object Object]","keys","attributes","filter","k","test","String","Array","from","Set","target","key","v","getAttribute","JSON","parse","error","t","setAttribute","o","entries","map","value","join","stringify","deleteProperty","removeAttribute","has","hasAttribute","defineProperty","otherdescipter","enumerable","configurable","writable","attr"],"mappings":"AAAA,MAAMA,EAAUC,OAAOD,SACjBE,IAAEA,EAAGC,QAAEA,EAAOC,IAAEA,GAAQJ,EACxBK,EAAc,QACpB,SAASC,EAASC,GACd,MAAoB,iBAANA,GAAwB,OAANA,EAEpC,SAASC,EAASD,GACd,MAAoB,iBAANA,iBAgBlB,SAAqCE,IATrC,SAA2BA,GACvB,GAAMA,aAAeC,aACjBD,aAAeE,YACfF,aAAeG,QAIf,OAAO,EAHP,MAAMC,UAAU,wBAMpBC,CAAkBL,GAClB,MAAMM,EAAyC,UAAhBN,EAAIO,SAA4C,SAArBd,EAAIO,EAAK,SAC/C,aAAhBA,EAAIO,QACR,IAAIC,EAAOC,OAAOC,OAAO,MACzB,OAAO,IAAIC,MAAMH,EAAM,CACnBI,UACI,MAAMC,EAAOnB,EAAQM,EAAIc,YAAYC,OAAOC,IAAM,KAAKC,KAAKC,OAAOF,GAAG,KACtE,OAAOV,EACDa,MAAMC,KAAK,IAAIC,IAAI,IAAIR,EAAMjB,KAC7BiB,GAEVD,IAAIU,EAAQC,GACR,GAAIjB,GAAyBiB,IAAQ3B,EACjC,OAAOH,EAAIO,EAAKJ,GAGhB,IAAI4B,EAAIxB,EAAIyB,aAAaP,OAAOK,IAChC,GAAKC,GAGDzB,EAASyB,GACT,IACI,OAAOE,KAAKC,MAAMT,OAAOM,IAE7B,MAAOI,GACH,OAAOJ,IAOvBZ,IAAIiB,EAAGN,EAAKC,GACR,OAAIlB,GAAyBiB,IAAQ3B,EAC1BD,EAAIK,EAAKJ,EAAa4B,GAEhB,UAARD,GACLvB,EAAI8B,aAAaZ,OAAOK,GAAMxB,EAASyB,GAAKA,EAAI3B,EAAS2B,IApD/CO,EAoDqEP,EAnDpFf,OAAOuB,QAAQD,GACjBE,IAAI,EAAEV,EAAKW,KAAWX,EAAM,IAAMW,GAClCC,KAAK,MAiDsFjB,OAAOM,KACpF,IAGPxB,EAAI8B,aAAaZ,OAAOK,GAAM1B,EAAS2B,GAAKE,KAAKU,UAAUZ,GAAKN,OAAOM,KAChE,GAzDvB,IAA0BO,GA4DlBM,eAAc,CAACR,EAAGb,KACdhB,EAAIsC,gBAAgBpB,OAAOF,KACpB,GAEXuB,IAAG,CAACjB,EAAQC,OACJjB,GAAyBiB,IAAQ3B,IAI1BI,EAAIwC,aAAatB,OAAOK,IAGvCkB,eAAc,KACH,EAEX7B,yBAAyBU,EAAQC,GAC7B,MAAMmB,EAAiB,CACnBC,YAAY,EACZC,cAAc,EACdC,UAAU,GAEd,GAAIvC,GAAyBiB,IAAQ3B,EACjC,MAAO,CACHsC,MAAOzC,EAAIO,EAAKJ,MACb8C,GAIP,IAAII,EAAO9C,EAAIyB,aAAaP,OAAOK,IACnC,OAAIuB,EACO,CACHZ,MAAOY,KACJJ,QAIP"}
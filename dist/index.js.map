{"version":3,"file":"index.js","sources":["../src/asserthtmlelement.ts","../src/mustUseDomProp.ts","../src/isArray.ts","../src/isstring.ts","../src/isobject.ts","../src/isSet.ts","../src/geteletagname.ts","../src/util.ts","../src/isinputcheckbox.ts","../src/hyphenateRE.ts","../src/objtostylestring.ts","../src/attributesownkeys.ts","../src/getattribute.ts","../src/setattribute.ts","../src/removeAttribute.ts","../src/isinputtextortextarea.ts","../src/hasAttribute.ts","../src/Attrhandler.ts","../src/index.ts"],"sourcesContent":["export function asserthtmlelement(ele: any) {\r\n    if (!(ele instanceof Element)) {\r\n        console.error(ele);\r\n        console.error(\"invalid HTMLElement!\");\r\n        throw TypeError();\r\n    }\r\n}\r\n","const acceptValue = [\"input\", \"textarea\", \"option\", \"select\"];\r\n\r\nexport default (tag: string, attr: string, attrtype: string) => {\r\n    return (\r\n        (attr === \"value\" &&\r\n            acceptValue.includes(tag) &&\r\n            attrtype !== \"button\") ||\r\n        (attr === \"selected\" && tag === \"option\") ||\r\n        (attr === \"checked\" && tag === \"input\") ||\r\n        (attr === \"muted\" && tag === \"video\")\r\n    );\r\n};\r\n","export function isArray(a: any): a is Array<any> {\r\n    return Array.isArray(a);\r\n}\r\n","export function isstring(a: any): a is string {\r\n    return typeof a === \"string\";\r\n}\r\n","export function isobject(a: any): a is Record<any, any> {\r\n    return typeof a === \"object\" && a !== null;\r\n}\r\n","export function isSet(a: any): a is Set<any> {\r\n    return a instanceof Set;\r\n}\r\n","export function geteletagname(ele: Element /* { tagName: string } */) {\r\n    return ele.tagName.toLowerCase();\r\n}\r\n","export const String = window.String;\r\nconst Reflect = window.Reflect;\r\nexport const { get, set, ownKeys } = Reflect;\r\nexport const valuestring = \"value\";\r\n\r\n","import { geteletagname } from \"./geteletagname\";\r\nimport { get } from \"src/util\";\r\nexport const isinputcheckbox = (\r\n    ele: HTMLElement | Element | SVGElement | HTMLInputElement\r\n) =>\r\n    \"input\" === geteletagname(ele) &&\r\n    (get(ele, \"type\") === \"checkbox\" || get(ele, \"type\") === \"radio\");\r\n","/* const camelizeRE = /-(\\w)/g;\r\nconst camelize = (str: string): string => {\r\n  return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : \"\"));\r\n};\r\n */\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\nexport const hyphenate = (str: string): string => {\r\n    return str.replace(hyphenateRE, \"-$1\").toLowerCase();\r\n};\r\n","import { hyphenate } from \"./hyphenateRE\";\r\n//设置style对象时，先json深拷贝\r\nexport function objtostylestring(obj: object): string {\r\n    //style属性的驼峰转横杠\r\n    obj = JSON.parse(JSON.stringify(obj));\r\n    const objentries = Object.entries(obj).map(([key, value]) => [\r\n        hyphenate(key).trim(),\r\n        value\r\n    ]);\r\n    return objentries.map(([key, value]) => key + \":\" + value).join(\";\");\r\n}\r\n","export function attributesownkeys(\r\n    ele: HTMLElement | Element | SVGElement | HTMLInputElement\r\n): string[] {\r\n    //   return ownKeys(ele.attributes).filter(k => !/\\d/.test(String(k)[0]));\r\n    return ele.getAttributeNames();\r\n}\r\n","export function getattribute(\r\n    ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n    key: string\r\n) {\r\n    return ele.getAttribute(key);\r\n}\r\n","export function setattribute(\r\n    ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n    key: string,\r\n    value: string\r\n) {\r\n    return ele.setAttribute(key, value);\r\n}\r\n","export function removeAttribute(\r\n    ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n    key: string\r\n) {\r\n    return ele.removeAttribute(key);\r\n}\r\n","import { geteletagname } from \"./geteletagname\";\r\nimport { get } from \"src/util\";\r\nexport function isinputtextortextarea(\r\n    ele: HTMLElement | Element | SVGElement | HTMLInputElement\r\n) {\r\n    const tagname = geteletagname(ele);\r\n    return (\r\n        tagname === \"textarea\" ||\r\n        tagname === \"select\" ||\r\n        (tagname === \"input\" && get(ele, \"type\") === \"text\")\r\n        /* 添加select元素 */\r\n    );\r\n}\r\n","function hasAttribute(\r\n    ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n    key: string\r\n) {\r\n    return ele.hasAttribute(key);\r\n}\r\nexport { hasAttribute };\r\n","import mustUseDomProp from \"./mustUseDomProp\";\r\nimport { isArray } from \"./isArray\";\r\nimport { isstring } from \"./isstring\";\r\nimport { isobject } from \"./isobject\";\r\nimport { isSet } from \"./isSet\";\r\nimport { isinputcheckbox } from \"./isinputcheckbox\";\r\nimport { objtostylestring } from \"./objtostylestring\";\r\nimport { attributesownkeys } from \"./attributesownkeys\";\r\nimport { getattribute } from \"./getattribute\";\r\nimport { geteletagname } from \"./geteletagname\";\r\nimport { setattribute } from \"./setattribute\";\r\nimport { removeAttribute } from \"./removeAttribute\";\r\nimport { isinputtextortextarea } from \"./isinputtextortextarea\";\r\nimport { hasAttribute } from \"./hasAttribute\";\r\nimport { valuestring, String, get, set } from './util';\r\nexport class Attrhandler {\r\n    constructor(ele: Element) {\r\n        this.#ele = ele;\r\n        const proto=Attrhandler.prototype\r\n        Reflect.ownKeys(proto).forEach(k=>{\r\n            let f=get(proto,k)\r\n            if(typeof f=='function'){\r\n                set(this,k,f)\r\n            }\r\n        })\r\n    }\r\n    #ele: Element;\r\n    ownKeys( /* target */) {\r\n        const ele=this.#ele\r\n        const isinputtextortextareaflag = isinputtextortextarea(ele);\r\n        const keys = attributesownkeys(ele);\r\n        return Array.from(new Set([\r\n            ...keys,\r\n            isinputcheckbox(ele) ? \"checked\" : undefined,\r\n            isinputtextortextareaflag ? valuestring : undefined\r\n            //Array.from(new Set([...keys, valuestring]))\r\n            //  : keys\r\n        ]\r\n            .flat(Infinity)\r\n            .filter(a => !!a)));\r\n    }\r\n    get(_target: any, key: string) {\r\n        const ele=this.#ele\r\n        //   const isinputtextortextareaflag = isinputtextortextarea(ele);\r\n        //   if (isinputcheckbox(ele) && key === \"checked\") {\r\n        //     return get(ele, \"checked\");\r\n        //   }\r\n        //   if (isinputtextortextareaflag && key === valuestring) {\r\n        //     return get(ele, valuestring);\r\n        //   }\r\n        if (mustUseDomProp(geteletagname(ele), String(key), get(ele, \"type\"))) {\r\n            return get(ele, String(key));\r\n        }\r\n        else {\r\n            const v = getattribute(ele, String(key));\r\n            // ele.getAttribute(String(key));\r\n            //   console.log(v);\r\n            if (v === \"\") {\r\n                return true;\r\n            }\r\n            /* 修复属性空字符串返回不是true的bug问题 */\r\n            if (v === null) {\r\n                return;\r\n            }\r\n            //如果属性空字符串则返回true\r\n            if (isstring(v)) {\r\n                try {\r\n                    return JSON.parse(String(v)); // v\r\n                }\r\n                catch (error) {\r\n                    return v;\r\n                }\r\n            }\r\n            else\r\n                return;\r\n        }\r\n    }\r\n    set(_t: any, key: string, v: any) {\r\n        const ele=this.#ele\r\n        //   const isinputtextortextareaflag = isinputtextortextarea(ele);\r\n        //不允许设置属性为函数\r\n        if (\"function\" === typeof v) {\r\n            console.error(v);\r\n            console.error(\"Setting properties as functions is not allowed\");\r\n            throw TypeError();\r\n            // throw TypeError(\"不允许设置属性为函数\");\r\n        }\r\n        /* 对于input的checkbox设置 checked属性时,不添加属性,直接修改checked属性*/\r\n        /*  if (geteletagname(ele) === \"input\" && key === \"checked\") {\r\n    set(ele, key, v);\r\n    return true;\r\n  }\r\n\r\n  if (isinputtextortextareaflag && key === valuestring) {\r\n    //设置元素的value属性,转成字符串\r\n    return set(ele, valuestring, String(v));\r\n  }  */\r\n        if (mustUseDomProp(geteletagname(ele), String(key), get(ele, \"type\"))) {\r\n            return set(ele, String(key), v);\r\n        }\r\n        else if (key === \"style\") {\r\n            const csstext = isstring(v)\r\n                ? v\r\n                : isobject(v)\r\n                    ? objtostylestring(v)\r\n                    : String(v);\r\n            //设置csstext可以删除注释\r\n            set(get(ele, \"style\"), \"cssText\", csstext.trim());\r\n            // ele.style.cssText = csstext.trim();\r\n            //    setattribute(\r\n            //      ele,\r\n            //       String(key),\r\n            //      isstring(v) ? v : isobject(v) ? objtostylestring(v) : String(v)\r\n            //     );\r\n            /*   ele.setAttribute(\r\n      String(key),\r\n      isstring(v) ? v : isobject(v) ? objtostylestring(v) : String(v)\r\n    ); */\r\n            return true;\r\n        }\r\n        else if (key === \"class\" && isobject(v)) {\r\n            const classtext = isArray(v)\r\n                ? v.join(\" \")\r\n                : isSet(v)\r\n                    ? [...v].join(\" \")\r\n                    : String(v);\r\n            setattribute(ele, String(key), classtext);\r\n            return true;\r\n            /*  if (isArray(v)) {\r\n      setattribute(ele, String(key), v.join(\" \"));\r\n    } else if (isSet(v)) {\r\n      setattribute(ele, String(key), [...v].join(\" \"));\r\n    } else {\r\n      setattribute(ele, String(key), String(v));\r\n    }*/\r\n            //\r\n        }\r\n        else {\r\n            /* 如果为false则删除attribute */\r\n            if (false === v || v === null || v === undefined) {\r\n                removeAttribute(ele, String(key));\r\n                return true;\r\n            }\r\n            //如果设置为true,则设置属性空字符串\r\n            if (isSet(v)) {\r\n                setattribute(ele, String(key), JSON.stringify([...v]));\r\n                return true;\r\n            }\r\n            else {\r\n                if (v === true) {\r\n                    v = \"\";\r\n                }\r\n                setattribute(ele, String(key), isobject(v) ? JSON.stringify(v) : String(v));\r\n                /*  ele.setAttribute(\r\n      String(key),\r\n      isobject(v) ? JSON.stringify(v) : String(v)\r\n    ); */\r\n                return true;\r\n            }\r\n        }\r\n        //   return true;\r\n    }\r\n    deleteProperty(_t: any, k: string) {\r\n        const ele=this.#ele\r\n        removeAttribute(ele, String(k));\r\n        // ele.removeAttribute(String(k));\r\n        return true;\r\n    }\r\n    has(_target: any, key: string) {\r\n        const ele=this.#ele\r\n        return hasAttribute(ele, String(key));\r\n        // return ownKeys(outputattrs).includes(key);\r\n        /*\r\nconst isinputtextortextareaflag = isinputtextortextarea(ele);\r\n\r\n  if (isinputtextortextareaflag && key === valuestring) {\r\n    return true;\r\n  } else {\r\n    return hasAttribute(ele, String(key));\r\n\r\n    // ele.hasAttribute(String(key));\r\n  }\r\n\r\n*/\r\n    }\r\n    defineProperty() {\r\n        return false;\r\n    }\r\n    getOwnPropertyDescriptor(_target: any, key: string) {\r\n        const ele=this.#ele\r\n        const otherdescipter = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true\r\n        };\r\n        // const myvalue: any = get(outputattrs, key);\r\n        const myvalue = getattribute(ele, String(key));\r\n        if (typeof myvalue !== \"undefined\") {\r\n            return {\r\n                value: myvalue,\r\n                ...otherdescipter\r\n            };\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n        /*  if (isinputtextortextareaflag && key === valuestring) {\r\n    return {\r\n      value: get(ele, valuestring),\r\n      ...otherdescipter\r\n      //   enumerable: true,\r\n      //   configurable: true,\r\n      //   writable: true\r\n    };\r\n  } else {\r\n    const attr = getattribute(ele, String(key));\r\n    // ele.getAttribute(String(key));\r\n\r\n    //如果属性空字符串则返回true\r\n    let outvalue;\r\n    if (attr === \"\") {\r\n      outvalue = true;\r\n    }\r\n    if (outvalue) {\r\n      return {\r\n        value: outvalue,\r\n        ...otherdescipter\r\n        // enumerable: true,\r\n        // configurable: true,\r\n        // writable: true\r\n      };\r\n    } else {\r\n      return;\r\n    }\r\n  } */\r\n    }\r\n    setPrototypeOf() {\r\n        return false;\r\n    }\r\n}\r\n","import { asserthtmlelement } from \"./asserthtmlelement\";\r\nimport { Attrhandler } from \"./Attrhandler\";\r\nexport default function createeleattragentreadwrite(ele: Element): Record<string, any> {\r\n    asserthtmlelement(ele);\r\n    var temp: Record<string, any> = Object.create(null);\r\n    const handler: ProxyHandler<any> = new Attrhandler(ele);\r\n    const outputattrs: Record<string, any> = new Proxy(temp, handler);\r\n    return outputattrs;\r\n}\r\n"],"names":["asserthtmlelement","ele","Element","console","error","TypeError","acceptValue","tag","attr","attrtype","includes","isArray","a","Array","isstring","isobject","isSet","Set","geteletagname","tagName","toLowerCase","String","window","Reflect","get","set","ownKeys","valuestring","isinputcheckbox","hyphenateRE","hyphenate","str","replace","objtostylestring","obj","JSON","parse","stringify","objentries","Object","entries","map","key","value","trim","join","attributesownkeys","getAttributeNames","getattribute","getAttribute","setattribute","setAttribute","removeAttribute","isinputtextortextarea","tagname","hasAttribute","Attrhandler","[object Object]","_ele","__classPrivateFieldSet","this","proto","prototype","forEach","k","f","isinputtextortextareaflag","keys","from","undefined","flat","Infinity","filter","_target","mustUseDomProp","v","_t","csstext","classtext","otherdescipter","enumerable","configurable","writable","myvalue","createeleattragentreadwrite","temp","create","handler","outputattrs","Proxy"],"mappings":"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"}
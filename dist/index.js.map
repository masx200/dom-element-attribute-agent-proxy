{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* const camelizeRE = /-(\\w)/g;\r\nconst camelize = (str: string): string => {\r\n  return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : \"\"));\r\n};\r\n */\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\nconst hyphenate = (str: string): string => {\r\n  return str.replace(hyphenateRE, \"-$1\").toLowerCase();\r\n};\r\nconst String = window.String;\r\nconst Reflect = window.Reflect;\r\nconst { get, set, ownKeys } = Reflect;\r\nconst valuestring = \"value\";\r\nfunction isobject(a: any): a is object {\r\n  return typeof a === \"object\" && a !== null;\r\n}\r\nfunction isstring(a: any): a is string {\r\n  return typeof a === \"string\";\r\n}\r\nfunction isArray(a: any): a is Array<any> {\r\n  return Array.isArray(a);\r\n}\r\n\r\nfunction isSet(a: any): a is Set<any> {\r\n  return a instanceof Set;\r\n}\r\n\r\nconst isinputcheckbox = (\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement\r\n) => \"input\" === geteletagname(ele) && get(ele, \"type\") === \"checkbox\";\r\n\r\n//设置style对象时，先json深拷贝\r\nfunction objtostylestring(obj: object): string {\r\n  //style属性的驼峰转横杠\r\n\r\n  obj = JSON.parse(JSON.stringify(obj));\r\n\r\n  obj = Object.fromEntries(\r\n    Object.entries(obj).map(([key, value]) => [hyphenate(key).trim(), value])\r\n  );\r\n\r\n  return Object.entries(obj)\r\n    .map(([key, value]) => key + \":\" + value)\r\n    .join(\";\");\r\n}\r\nfunction asserthtmlelement(ele: any) {\r\n  if (!(ele instanceof Element)) {\r\n    console.error(ele);\r\n    console.error(\"invalid HTMLElement!\");\r\n    throw TypeError();\r\n  }\r\n}\r\nexport default function createeleattragentreadwrite(ele: Element): object {\r\n  asserthtmlelement(ele);\r\n\r\n  var temp: object = Object.create(null);\r\n\r\n  const outputattrs: object = new Proxy(temp, {\r\n    ownKeys(/* target */) {\r\n      const isinputtextortextareaflag = isinputtextortextarea(ele);\r\n\r\n      const keys = attributesownkeys(ele);\r\n\r\n      return Array.from(\r\n        new Set(\r\n          [\r\n            ...keys,\r\n            isinputcheckbox(ele) ? \"checked\" : undefined,\r\n            isinputtextortextareaflag ? valuestring : undefined\r\n            //Array.from(new Set([...keys, valuestring]))\r\n            //  : keys\r\n          ]\r\n            .flat(Infinity)\r\n            .filter(a => !!a)\r\n        )\r\n      );\r\n    },\r\n    get(target, key) {\r\n      const isinputtextortextareaflag = isinputtextortextarea(ele);\r\n\r\n      if (isinputcheckbox(ele) && key === \"checked\") {\r\n        return get(ele, \"checked\");\r\n      }\r\n      if (isinputtextortextareaflag && key === valuestring) {\r\n        return get(ele, valuestring);\r\n      } else {\r\n        const v = getattribute(ele, String(key));\r\n        // ele.getAttribute(String(key));\r\n        //   console.log(v);\r\n        if (v === \"\") {\r\n          return true;\r\n        }\r\n        /* 修复属性空字符串返回不是true的bug问题 */\r\n        if (v === null) {\r\n          return;\r\n        }\r\n\r\n        //如果属性空字符串则返回true\r\n\r\n        if (isstring(v)) {\r\n          try {\r\n            return JSON.parse(String(v)); // v\r\n          } catch (error) {\r\n            return v;\r\n          }\r\n        } else return;\r\n      }\r\n    },\r\n    set(t, key, v) {\r\n      const isinputtextortextareaflag = isinputtextortextarea(ele);\r\n\r\n      //不允许设置属性为函数\r\n      if (\"function\" === typeof v) {\r\n        console.error(v);\r\n\r\n        console.error(\"Setting properties as functions is not allowed\");\r\n        throw TypeError();\r\n\r\n        // throw TypeError(\"不允许设置属性为函数\");\r\n      }\r\n      /* 对于input的checkbox设置 checked属性时,不添加属性,直接修改checked属性*/\r\n      if (geteletagname(ele) === \"input\" && key === \"checked\") {\r\n        set(ele, key, v);\r\n        return true;\r\n      }\r\n\r\n      if (isinputtextortextareaflag && key === valuestring) {\r\n        //设置元素的value属性,转成字符串\r\n        return set(ele, valuestring, String(v));\r\n      } else if (key === \"style\") {\r\n        const csstext = isstring(v)\r\n          ? v\r\n          : isobject(v)\r\n          ? objtostylestring(v)\r\n          : String(v);\r\n        //设置csstext可以删除注释\r\n        set(get(ele, \"style\"), \"cssText\", csstext.trim());\r\n        // ele.style.cssText = csstext.trim();\r\n\r\n        //    setattribute(\r\n        //      ele,\r\n        //       String(key),\r\n        //      isstring(v) ? v : isobject(v) ? objtostylestring(v) : String(v)\r\n        //     );\r\n        /*   ele.setAttribute(\r\n          String(key),\r\n          isstring(v) ? v : isobject(v) ? objtostylestring(v) : String(v)\r\n        ); */\r\n        return true;\r\n      } else if (key === \"class\" && isobject(v)) {\r\n        const classtext = isArray(v)\r\n          ? v.join(\" \")\r\n          : isSet(v)\r\n          ? [...v].join(\" \")\r\n          : String(v);\r\n\r\n        setattribute(ele, String(key), classtext);\r\n\r\n        /*  if (isArray(v)) {\r\n          setattribute(ele, String(key), v.join(\" \"));\r\n        } else if (isSet(v)) {\r\n          setattribute(ele, String(key), [...v].join(\" \"));\r\n        } else {\r\n          setattribute(ele, String(key), String(v));\r\n        }*/\r\n        //\r\n      } else {\r\n        //如果设置为true,则设置属性空字符串\r\n        if (isSet(v)) {\r\n          setattribute(ele, String(key), JSON.stringify([...v]));\r\n        } else {\r\n          if (v === true) {\r\n            v = \"\";\r\n          }\r\n\r\n          setattribute(\r\n            ele,\r\n            String(key),\r\n            isobject(v) ? JSON.stringify(v) : String(v)\r\n          );\r\n          /*  ele.setAttribute(\r\n          String(key),\r\n          isobject(v) ? JSON.stringify(v) : String(v)\r\n        ); */\r\n          return true;\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n    deleteProperty(t, k) {\r\n      removeAttribute(ele, String(k));\r\n      // ele.removeAttribute(String(k));\r\n      return true;\r\n    },\r\n    has(target, key) {\r\n      return ownKeys(outputattrs).includes(key);\r\n      /*\r\nconst isinputtextortextareaflag = isinputtextortextarea(ele);\r\n  \r\n      if (isinputtextortextareaflag && key === valuestring) {\r\n        return true;\r\n      } else {\r\n        return hasAttribute(ele, String(key));\r\n\r\n        // ele.hasAttribute(String(key));\r\n      }\r\n\r\n*/\r\n    },\r\n    defineProperty() {\r\n      return false;\r\n    },\r\n    getOwnPropertyDescriptor(target, key) {\r\n      const otherdescipter = {\r\n        enumerable: true,\r\n        configurable: true,\r\n        writable: true\r\n      };\r\n      const myvalue: any = get(outputattrs, key);\r\n      if (typeof myvalue !== \"undefined\") {\r\n        return {\r\n          value: myvalue,\r\n          ...otherdescipter\r\n        };\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      /*  if (isinputtextortextareaflag && key === valuestring) {\r\n        return {\r\n          value: get(ele, valuestring),\r\n          ...otherdescipter\r\n          //   enumerable: true,\r\n          //   configurable: true,\r\n          //   writable: true\r\n        };\r\n      } else {\r\n        const attr = getattribute(ele, String(key));\r\n        // ele.getAttribute(String(key));\r\n\r\n        //如果属性空字符串则返回true\r\n        let outvalue;\r\n        if (attr === \"\") {\r\n          outvalue = true;\r\n        }\r\n        if (outvalue) {\r\n          return {\r\n            value: outvalue,\r\n            ...otherdescipter\r\n            // enumerable: true,\r\n            // configurable: true,\r\n            // writable: true\r\n          };\r\n        } else {\r\n          return;\r\n        }\r\n      } */\r\n    },\r\n    setPrototypeOf() {\r\n      return false;\r\n    }\r\n    /*  setPrototypeOf() {\r\n      return false;\r\n    },\r\n    getPrototypeOf() {\r\n      return null;\r\n    }*/\r\n  });\r\n  return outputattrs;\r\n}\r\nfunction attributesownkeys(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement\r\n): string[] {\r\n  //   return ownKeys(ele.attributes).filter(k => !/\\d/.test(String(k)[0]));\r\n  return ele.getAttributeNames();\r\n}\r\nfunction getattribute(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n  key: string\r\n) {\r\n  return ele.getAttribute(key);\r\n}\r\nfunction geteletagname(ele: Element /* { tagName: string } */) {\r\n  return ele.tagName.toLowerCase();\r\n}\r\nfunction setattribute(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n  key: string,\r\n  value: string\r\n) {\r\n  return ele.setAttribute(key, value);\r\n}\r\nfunction removeAttribute(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n  key: string\r\n) {\r\n  return ele.removeAttribute(key);\r\n}\r\n\r\n/* function hasAttribute(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n  key: string\r\n) {\r\n  return ele.hasAttribute(key);\r\n}\r\n */\r\nfunction isinputtextortextarea(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement\r\n) {\r\n  const tagname = geteletagname(ele);\r\n  return (\r\n    (tagname === \"input\" && get(ele, \"type\") === \"text\") ||\r\n    tagname === \"textarea\" ||\r\n    tagname === \"select\"\r\n    /* 添加select元素 */\r\n  );\r\n}\r\n"],"names":["hyphenateRE","hyphenate","str","replace","toLowerCase","String","window","Reflect","get","set","ownKeys","valuestring","isobject","a","isstring","isArray","Array","isSet","Set","isinputcheckbox","ele","geteletagname","objtostylestring","obj","JSON","parse","stringify","Object","fromEntries","entries","map","key","value","trim","join","asserthtmlelement","Element","console","error","TypeError","createeleattragentreadwrite","temp","create","outputattrs","Proxy","[object Object]","isinputtextortextareaflag","isinputtextortextarea","keys","attributesownkeys","from","undefined","flat","Infinity","filter","target","v","getattribute","t","csstext","classtext","setattribute","k","removeAttribute","includes","otherdescipter","enumerable","configurable","writable","myvalue","getAttributeNames","getAttribute","tagName","setAttribute","tagname"],"mappings":"AAKA,MAAMA,cAAc;;AACpB,MAAMC,YAAaC;IACjB,OAAOA,IAAIC,QAAQH,aAAa,OAAOI;;;AAEzC,MAAMC,SAASC,OAAOD;;AACtB,MAAME,UAAUD,OAAOC;;AACvB,OAAMC,KAAEA,KAAGC,KAAEA,KAAGC,SAAEA,WAAYH;;AAC9B,MAAMI,cAAc;;AACpB,SAASC,SAASC;IAChB,cAAcA,MAAM,YAAYA,MAAM;;;AAExC,SAASC,SAASD;IAChB,cAAcA,MAAM;;;AAEtB,SAASE,QAAQF;IACf,OAAOG,MAAMD,QAAQF;;;AAGvB,SAASI,MAAMJ;IACb,OAAOA,aAAaK;;;AAGtB,MAAMC,kBACJC,OACG,YAAYC,cAAcD,QAAQZ,IAAIY,KAAK,YAAY;;AAG5D,SAASE,iBAAiBC;IAGxBA,MAAMC,KAAKC,MAAMD,KAAKE,UAAUH;IAEhCA,MAAMI,OAAOC,YACXD,OAAOE,QAAQN,KAAKO,IAAI,EAAEC,KAAKC,WAAW,EAAC/B,UAAU8B,KAAKE,QAAQD;IAGpE,OAAOL,OAAOE,QAAQN,KACnBO,IAAI,EAAEC,KAAKC,WAAWD,MAAM,MAAMC,OAClCE,KAAK;;;AAEV,SAASC,kBAAkBf;IACzB,MAAMA,eAAegB,UAAU;QAC7BC,QAAQC,MAAMlB;QACdiB,QAAQC,MAAM;QACd,MAAMC;;;;SAGcC,4BAA4BpB;IAClDe,kBAAkBf;IAElB,IAAIqB,OAAed,OAAOe,OAAO;IAEjC,MAAMC,cAAsB,IAAIC,MAAMH,MAAM;QAC1CI;YACE,MAAMC,4BAA4BC,sBAAsB3B;YAExD,MAAM4B,OAAOC,kBAAkB7B;YAE/B,OAAOJ,MAAMkC,KACX,IAAIhC,IACF,KACK8B,MACH7B,gBAAgBC,OAAO,YAAY+B,WACnCL,4BAA4BnC,cAAcwC,YAIzCC,KAAKC,UACLC,OAAOzC,OAAOA;;QAIvBgC,IAAIU,QAAQxB;YACV,MAAMe,4BAA4BC,sBAAsB3B;YAExD,IAAID,gBAAgBC,QAAQW,QAAQ,WAAW;gBAC7C,OAAOvB,IAAIY,KAAK;;YAElB,IAAI0B,6BAA6Bf,QAAQpB,aAAa;gBACpD,OAAOH,IAAIY,KAAKT;mBACX;gBACL,MAAM6C,IAAIC,aAAarC,KAAKf,OAAO0B;gBAGnC,IAAIyB,MAAM,IAAI;oBACZ,OAAO;;gBAGT,IAAIA,MAAM,MAAM;oBACd;;gBAKF,IAAI1C,SAAS0C,IAAI;oBACf;wBACE,OAAOhC,KAAKC,MAAMpB,OAAOmD;sBACzB,OAAOlB;wBACP,OAAOkB;;uBAEJ;;;QAGXX,IAAIa,GAAG3B,KAAKyB;YACV,MAAMV,4BAA4BC,sBAAsB3B;YAGxD,IAAI,sBAAsBoC,GAAG;gBAC3BnB,QAAQC,MAAMkB;gBAEdnB,QAAQC,MAAM;gBACd,MAAMC;;YAKR,IAAIlB,cAAcD,SAAS,WAAWW,QAAQ,WAAW;gBACvDtB,IAAIW,KAAKW,KAAKyB;gBACd,OAAO;;YAGT,IAAIV,6BAA6Bf,QAAQpB,aAAa;gBAEpD,OAAOF,IAAIW,KAAKT,aAAaN,OAAOmD;mBAC/B,IAAIzB,QAAQ,SAAS;gBAC1B,MAAM4B,UAAU7C,SAAS0C,KACrBA,IACA5C,SAAS4C,KACTlC,iBAAiBkC,KACjBnD,OAAOmD;gBAEX/C,IAAID,IAAIY,KAAK,UAAU,WAAWuC,QAAQ1B;gBAY1C,OAAO;mBACF,IAAIF,QAAQ,WAAWnB,SAAS4C,IAAI;gBACzC,MAAMI,YAAY7C,QAAQyC,KACtBA,EAAEtB,KAAK,OACPjB,MAAMuC,KACN,KAAIA,IAAGtB,KAAK,OACZ7B,OAAOmD;gBAEXK,aAAazC,KAAKf,OAAO0B,MAAM6B;mBAU1B;gBAEL,IAAI3C,MAAMuC,IAAI;oBACZK,aAAazC,KAAKf,OAAO0B,MAAMP,KAAKE,UAAU,KAAI8B;uBAC7C;oBACL,IAAIA,MAAM,MAAM;wBACdA,IAAI;;oBAGNK,aACEzC,KACAf,OAAO0B,MACPnB,SAAS4C,KAAKhC,KAAKE,UAAU8B,KAAKnD,OAAOmD;oBAM3C,OAAO;;;YAGX,OAAO;;QAETX,eAAea,GAAGI;YAChBC,gBAAgB3C,KAAKf,OAAOyD;YAE5B,OAAO;;QAETjB,IAAIU,QAAQxB;YACV,OAAOrB,QAAQiC,aAAaqB,SAASjC;;QAcvCc;YACE,OAAO;;QAETA,yBAAyBU,QAAQxB;YAC/B,MAAMkC,iBAAiB;gBACrBC,YAAY;gBACZC,cAAc;gBACdC,UAAU;;YAEZ,MAAMC,UAAe7D,IAAImC,aAAaZ;YACtC,WAAWsC,YAAY,aAAa;gBAClC,OAAO;oBACLrC,OAAOqC;uBACJJ;;mBAEA;gBACL;;;QAiCJpB;YACE,OAAO;;;IASX,OAAOF;;;AAET,SAASM,kBACP7B;IAGA,OAAOA,IAAIkD;;;AAEb,SAASb,aACPrC,KACAW;IAEA,OAAOX,IAAImD,aAAaxC;;;AAE1B,SAASV,cAAcD;IACrB,OAAOA,IAAIoD,QAAQpE;;;AAErB,SAASyD,aACPzC,KACAW,KACAC;IAEA,OAAOZ,IAAIqD,aAAa1C,KAAKC;;;AAE/B,SAAS+B,gBACP3C,KACAW;IAEA,OAAOX,IAAI2C,gBAAgBhC;;;AAU7B,SAASgB,sBACP3B;IAEA,MAAMsD,UAAUrD,cAAcD;IAC9B,OACGsD,YAAY,WAAWlE,IAAIY,KAAK,YAAY,UAC7CsD,YAAY,cACZA,YAAY;;;"}
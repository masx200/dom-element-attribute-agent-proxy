{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["const Reflect = window.Reflect;\r\nconst { get, set } = Reflect;\r\nconst valuestring = \"value\";\r\nfunction isobject(a: any) {\r\n  return typeof a === \"object\" && a !== null;\r\n}\r\nfunction isstring(a: any) {\r\n  return typeof a === \"string\";\r\n}\r\n\r\n// function inputandtextareaagent(ele) {\r\n//   asserthtmlelement(ele);\r\n//   if (\r\n//     (ele.tagName === \"INPUT\" && ele.type === \"text\") ||\r\n//     ele.tagName === \"TEXTAREA\"\r\n//   ) {\r\n//     return new Proxy(ele, {\r\n//       ownKeys() {},\r\n//       set() {},\r\n//       has() {},\r\n//       get() {}\r\n//     });\r\n//   } else {\r\n//     return ele;\r\n//   }\r\n// }\r\n\r\nfunction objtostylestring(o: object): string {\r\n  return Object.entries(o)\r\n    .map(([key, value]) => key + \":\" + value)\r\n    .join(\";\");\r\n}\r\nfunction asserthtmlelement(ele: any) {\r\n  if (\r\n    !//     ele instanceof HTMLElement ||\r\n    //      ele instanceof SVGElement ||\r\n    (ele instanceof Element)\r\n  ) {\r\n    throw TypeError(\"invalid HTMLElement!\");\r\n  } else return true;\r\n}\r\nexport default function createeleattragentreadwrite(\r\n  ele: HTMLElement | SVGElement | Element | HTMLInputElement\r\n): object {\r\n  //   if (\r\n  //     !(\r\n  //       ele instanceof HTMLElement ||\r\n  //       ele instanceof SVGElement ||\r\n  //       ele instanceof Element\r\n  //     )\r\n  //   ) {\r\n  //     throw TypeError(\"invalid HTMLElement!\");\r\n  //   }\r\n  asserthtmlelement(ele);\r\n\r\n  // const isinputtextortextarea =\r\n  //   (ele.tagName === \"INPUT\" && get(ele, \"type\") === \"text\") ||\r\n  //   ele.tagName === \"TEXTAREA\";\r\n  const isinputtextortextareaflag = isinputtextortextarea(ele);\r\n  var temp: object = Object.create(null);\r\n  return new Proxy(temp, {\r\n    ownKeys(/* target */) {\r\n      const keys = attributesownkeys(ele);\r\n      // ownKeys(ele.attributes).filter(\r\n      //   k => !/\\d/.test(String(k)[0])\r\n      // );\r\n      return isinputtextortextareaflag\r\n        ? Array.from(new Set([...keys, valuestring]))\r\n        : keys;\r\n    },\r\n    get(target, key) {\r\n      if (isinputtextortextareaflag && key === valuestring) {\r\n        return get(ele, valuestring);\r\n      } else {\r\n        const v = getattribute(ele, String(key));\r\n        // ele.getAttribute(String(key));\r\n        //   console.log(v);\r\n        if (v === \"\") {\r\n          return true;\r\n        }\r\n        if (v === null) {\r\n          return;\r\n        }\r\n\r\n        //如果属性空字符串则返回true\r\n\r\n        if (isstring(v)) {\r\n          try {\r\n            return JSON.parse(String(v)); // v\r\n          } catch (error) {\r\n            return v;\r\n          }\r\n        } else return;\r\n      }\r\n    },\r\n    set(t, key, v) {\r\n      if (isinputtextortextareaflag && key === valuestring) {\r\n        return set(ele, valuestring, v);\r\n      } else if (key === \"style\") {\r\n        setattribute(\r\n          ele,\r\n          String(key),\r\n          isstring(v) ? v : isobject(v) ? objtostylestring(v) : String(v)\r\n        );\r\n        /*   ele.setAttribute(\r\n          String(key),\r\n          isstring(v) ? v : isobject(v) ? objtostylestring(v) : String(v)\r\n        ); */\r\n        return true;\r\n      } else {\r\n        //如果设置为true,则设置属性空字符串\r\n\r\n        if (v === true) {\r\n          v = \"\";\r\n        }\r\n\r\n        setattribute(\r\n          ele,\r\n          String(key),\r\n          isobject(v) ? JSON.stringify(v) : String(v)\r\n        );\r\n        /*  ele.setAttribute(\r\n          String(key),\r\n          isobject(v) ? JSON.stringify(v) : String(v)\r\n        ); */\r\n        return true;\r\n      }\r\n    },\r\n    deleteProperty(t, k) {\r\n      removeAttribute(ele, String(k));\r\n      // ele.removeAttribute(String(k));\r\n      return true;\r\n    },\r\n    has(target, key) {\r\n      if (isinputtextortextareaflag && key === valuestring) {\r\n        return true;\r\n      } else {\r\n        return hasAttribute(ele, String(key));\r\n\r\n        // ele.hasAttribute(String(key));\r\n      }\r\n    },\r\n    defineProperty() {\r\n      return false;\r\n    },\r\n    getOwnPropertyDescriptor(target, key) {\r\n      const otherdescipter = {\r\n        enumerable: true,\r\n        configurable: true,\r\n        writable: true\r\n      };\r\n      if (isinputtextortextareaflag && key === valuestring) {\r\n        return {\r\n          value: get(ele, valuestring),\r\n          ...otherdescipter\r\n          //   enumerable: true,\r\n          //   configurable: true,\r\n          //   writable: true\r\n        };\r\n      } else {\r\n        const attr = getattribute(ele, String(key));\r\n        // ele.getAttribute(String(key));\r\n\r\n        //如果属性空字符串则返回true\r\n        let outvalue;\r\n        if (attr === \"\") {\r\n          outvalue = true;\r\n        }\r\n        if (outvalue) {\r\n          return {\r\n            value: outvalue,\r\n            ...otherdescipter\r\n            // enumerable: true,\r\n            // configurable: true,\r\n            // writable: true\r\n          };\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    /*  setPrototypeOf() {\r\n      return false;\r\n    },\r\n    getPrototypeOf() {\r\n      return null;\r\n    }*/\r\n  });\r\n}\r\nfunction attributesownkeys(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement\r\n): string[] {\r\n  //   return ownKeys(ele.attributes).filter(k => !/\\d/.test(String(k)[0]));\r\n  return ele.getAttributeNames();\r\n}\r\nfunction getattribute(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n  key: string\r\n) {\r\n  return ele.getAttribute(key);\r\n}\r\nfunction geteletagname(ele: Element /* { tagName: string } */) {\r\n  return ele.tagName.toLowerCase();\r\n}\r\nfunction setattribute(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n  key: string,\r\n  value: string\r\n) {\r\n  return ele.setAttribute(key, value);\r\n}\r\nfunction removeAttribute(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n  key: string\r\n) {\r\n  return ele.removeAttribute(key);\r\n}\r\n\r\nfunction hasAttribute(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement,\r\n  key: string\r\n) {\r\n  return ele.hasAttribute(key);\r\n}\r\n\r\nfunction isinputtextortextarea(\r\n  ele: HTMLElement | Element | SVGElement | HTMLInputElement\r\n) {\r\n  const tagname = geteletagname(ele);\r\n  return (\r\n    (tagname === \"input\" && get(ele, \"type\") === \"text\") ||\r\n    tagname === \"textarea\"\r\n  );\r\n}\r\n"],"names":["Reflect","window","get","set","valuestring","isobject","a","isstring","objtostylestring","o","Object","entries","map","key","value","join","asserthtmlelement","ele","Element","TypeError","createeleattragentreadwrite","isinputtextortextareaflag","isinputtextortextarea","temp","create","Proxy","[object Object]","keys","attributesownkeys","Array","from","Set","target","v","getattribute","String","JSON","parse","error","t","setattribute","stringify","k","removeAttribute","hasAttribute","otherdescipter","enumerable","configurable","writable","attr","outvalue","getAttributeNames","getAttribute","geteletagname","tagName","toLowerCase","setAttribute","tagname"],"mappings":"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"}